0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.3
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/designfrontier/projects/harken',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/designfrontier/.npm/harken/1.2.3/package.tgz not in flight; packing
9 verbose correctMkdir /Users/designfrontier/.npm correctMkdir not in flight; initializing
10 info lifecycle harken@1.2.3~prepublish: harken@1.2.3
11 silly lifecycle harken@1.2.3~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/designfrontier/.npm/harken/1.2.3/package.tgz',
12 verbose tar pack   '/Users/designfrontier/projects/harken' ]
13 verbose tarball /Users/designfrontier/.npm/harken/1.2.3/package.tgz
14 verbose folder /Users/designfrontier/projects/harken
15 verbose addLocalTarball adding from inside cache /Users/designfrontier/.npm/harken/1.2.3/package.tgz
16 verbose correctMkdir /Users/designfrontier/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd harken@1.2.3
18 verbose afterAdd /Users/designfrontier/.npm/harken/1.2.3/package/package.json not in flight; writing
19 verbose correctMkdir /Users/designfrontier/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/designfrontier/.npm/harken/1.2.3/package/package.json written
21 silly publish { name: 'harken',
21 silly publish   version: '1.2.3',
21 silly publish   description: 'a simple event library',
21 silly publish   main: 'index.js',
21 silly publish   scripts:
21 silly publish    { start: 'node app.js',
21 silly publish      test: 'npm run lint && istanbul cover _mocha -- *.test.js bin/*.test.js components/**/*.test.js',
21 silly publish      codeship: 'npm test && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage',
21 silly publish      lint: 'bin/lint.js',
21 silly publish      release: 'npm test && echo \' => releasing\' && bin/release.js' },
21 silly publish   repository: { type: 'git', url: 'git+https://github.com/ansble/harken.git' },
21 silly publish   keywords: [ 'events', 'eda', 'universal' ],
21 silly publish   author: { name: 'Daniel Sellers' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/ansble/harken/issues' },
21 silly publish   homepage: 'https://github.com/ansble/harken',
21 silly publish   engines: { node: '>4.0.0' },
21 silly publish   devDependencies:
21 silly publish    { chalk: '~2.1.0',
21 silly publish      chai: '~4.1.0',
21 silly publish      coveralls: '~3.0.0',
21 silly publish      eslint: '~4.8.0',
21 silly publish      istanbul: '~0.4.5',
21 silly publish      minimist: '~1.2.0',
21 silly publish      mocha: '~4.0.0' },
21 silly publish   dependencies: { 'event-state': '^1.0.0' },
21 silly publish   contributors:
21 silly publish    [ { name: 'Daniel Sellers', email: 'daniel@designfrontier.net' },
21 silly publish      { name: 'greenkeeper[bot]',
21 silly publish        email: 'greenkeeper[bot]@users.noreply.github.com' },
21 silly publish      { name: 'Daniel Sellers', email: 'dsellers@instructure.com' } ],
21 silly publish   readme: '# Harken!\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/ansble/harken.svg)](https://greenkeeper.io/)\nHarken is a drop in replacement for the built in eventemitter in nodejs/iojs with a few extre nice pieces. It also works in clients because it is pretty much just simple javascript. So now you can take the node event goodness and have it everywhere.\n\n[ ![Codeship Status for ansble/harken](https://codeship.com/projects/f07390c0-352f-0133-3b06-06da35d24f74/status?branch=master)](https://codeship.com/projects/100700)\n## API\n\nThis is how you use this thing.\n\n### .on / .addListener\nThe most basic usage looks like this:\n```\n    harken.on(\'some-event\', function () {\n        //do something\n    });\n\n    harken.addListener(\'some-event\', function () {\n        //do something\n    });\n```\nPass in an event to listen for, and a function to execute when the event happens. Simple.\n\n>`.on` and `.addListener` are the same function so from here on out we\'ll just be using `.on` in the examples. But know that you can change the name of the function to `.addListener` and it will work exactly the same.\n\nA `.on` allows you to pass it the following options either as positionals or as an object hash:\n```\n    harken.on(eventName, handler, scope, once);\n\n    harkent.on({\n        eventName: \'event\'\n        , handler: function () {}\n        , scope: {}\n        , once: true\n    });\n```\n##### Required parameters\neventName is the event that you want to listen for.\nhandler is the function to be executed, it recieves the payload of the event.\n\n##### Optional parameters\nscope is the scope applied to the execution of the function. Can be useful at times and is optional\nonce is a boolean that indicates if the listener should be un-bound after it has been called.\n\n### .off / .removeListener\nThe most basic usage looks like this:\n```\n    harken.off(\'some-event\', function () {\n        //do something\n    });\n\n    harken.removeListener(\'some-event\', function () {\n        //do something\n    });\n```\nPass in an event to stop listening too, and the function that you want to stop triggering.\n\n>`.off` and `.removeListener` are the same function so from here on out we\'ll just be using `.off` in the examples. But know that you can change the name of the function to `.removeListener` and it will work exactly the same.\n\nA `.off` allows you to pass it the following options either as positionals or as an object hash:\n```\n    harken.off(eventName, handler, scope, once);\n\n    harkent.off({\n        eventName: \'event\'\n        , handler: function () {}\n        , scope: {}\n        , once: true\n    });\n```\n##### Required parameters\neventName is the event that you want to stop listening to.\n\n##### Optional parameters\nhandler is the function that was executing.\nscope is the scope applied to the execution of the function.\nonce is a boolean that indicates if the listener should be un-bound after it has been called.\n\n`.off` looks for an exact combination of the parameters passed into it. This allows for either precise unbinding of listeners, or a more heavy-handed approach that turns off all the listeners for a given event. It\'s all up to you and how you use it.\n\n### .emit\n```\n    harken.emit(\'some-event\', {payload: \'is cool and awesome\'});\n```\n\nEmit triggers the listeners for a given event and can accept an optional payload. The payload can be any valid javascript value, so objects, strings, arrays, you name it.\n\n### .cleanup\n```\n    harken.cleanup();\n```\n\n`.cleanup` removes any old listeners that are hanging around for no good reason. It executes `.off` on any listener in the store that is over 120000ms old. It\'s arbitrary... but this will be an area of improvement going forward.\n\n### .listeners\n```\n    var listenersArray = harken.listeners(\'some-event\');\n```\nReturns all of the listeners for a given event.\n\n### .once\nThis is a convenience function for creating one-time-use event listeners. Any listener created with it will be unbound after executing.\n```\n    harken.once(\'some-event\', function () {\n        //do something\n    });\n```\nPass in an event to listen for, and a function to execute when the event happens.\n\nA `.once` allows you to pass it the following options either as positionals or as an object hash:\n```\n    harken.once(eventName, handler, scope);\n\n    harkent.once({\n        eventName: \'event\'\n        , handler: function () {}\n        , scope: {}\n    });\n```\n### .removeAllListeners\n```\n    harken.removeAllListeners(\'some-event\');\n```\n\nThis is a convenience function for `harken.off(\'some-event\')` which is already pretty convenient. It removes all the listeners for a given event.\n\n### .required\n```\n    harken.required([\'event-1\', \'event-2\', \'event-3\'], function (dataArray) {\n    //do something here when all three events have triggered\n  });\n```\nHarken uses [event-state](https://www.npmjs.com/package/event-state) to provide stateful eventing. Above is a simple example but you probably want to read the documentation on `event-state` if you are going to use this extensively. It\'s API is pretty simple.\n',
21 silly publish   readmeFilename: 'readme.md',
21 silly publish   gitHead: 'a31f291b6ad3c7be6b943a859593ea35d8a9e350',
21 silly publish   _id: 'harken@1.2.3',
21 silly publish   _shasum: '5f45b576ffc0c2c21f4baff0fa01e39c99f0cdf4',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name harken
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry http://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'harken',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'harken',
26 silly mapToRegistry   name: 'harken',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri http://registry.npmjs.org/harken
28 verbose publish registryBase http://registry.npmjs.org/
29 silly publish uploading /Users/designfrontier/.npm/harken/1.2.3/package.tgz
30 verbose request uri http://registry.npmjs.org/harken
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 6:35:02 AM
33 verbose request using bearer token for auth
34 verbose request id 076e9207ebdaeb91
35 http request PUT http://registry.npmjs.org/harken
36 http 403 http://registry.npmjs.org/harken
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '91',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Wed, 04 Oct 2017 12:35:03 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sjc3126-SJC',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1507120503.797197,VS0,VE238',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating /Users/designfrontier/.npm/registry.npmjs.org/harken on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published version 1.2.3. : harken
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid harken
43 verbose cwd /Users/designfrontier/projects/harken
44 error Darwin 17.2.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.10.3
47 error npm  v3.10.10
48 error code E403
49 error You cannot publish over the previously published version 1.2.3. : harken
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
